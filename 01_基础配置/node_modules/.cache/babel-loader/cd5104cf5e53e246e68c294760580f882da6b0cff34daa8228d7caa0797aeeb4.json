{"ast":null,"code":"import sumFun from './js/sum';\nimport countFun from './js/count';\nimport { add } from './js/math';\nimport './css/index.css';\nimport './less/index.less';\nimport \"./sass/index.sass\";\nimport \"./sass/index.scss\";\nimport \"./styl/index.styl\";\nimport './css/iconfont.css';\nconsole.log(sumFun(1, 2, 3, 4, 5));\ncountFun(55);\nconsole.log(add(1, 1));\n\n// 判断是否支持HMR功能\n// 各个文件模块的监听的回调不会相互影响；哪一个模块发生变化，就执行哪一个回调；\nif (module.hot) {\n  // 回调函数可以不写，也会只更新这个count.js文件模块\n  module.hot.accept(\"./js/count.js\", function () {\n    // count.js 文件修改后，要执行的回调函数\n    console.log('count.js文件热替换');\n  });\n  // 回调函数可以不写，也会只更新这个sum.js文件模块\n  module.hot.accept(\"./js/sum.js\", function () {\n    console.log('sum.js文件热替换');\n  });\n}\n\n// import函数 按需加载\ndocument.getElementById('after_load').onclick = function () {\n  // eslint不能识别 import 函数的动态导入语法，需要在 .eslintrc.js 中做额外配置\n  // 给按需加载的after_load.js文件命名为after_load\n  // webpackChunkName: \"after_load\"：这是webpack动态导入模块命名的方式\n  // \"after_load\"将来就会作为下面chunkFilename的属性值[name]的值显示。\n  import( /* webpackChunkName: \"after_load\" */'./js/after_load').then(_ref => {\n    let {\n      mul,\n      del\n    } = _ref;\n    console.log(mul(3, 5));\n    console.log(del(5, 3));\n  });\n};\n\n// 添加promise代码，测试 Core-js 彻底解决 js 兼容性问题\nconst promise = Promise.resolve();\npromise.then(() => {\n  console.log(\"hello promise\");\n});\n\n// PWA（渐进式网络应用程序），实现离线(offline) 时应用程序能够继续运行功能\nif (\"serviceWorker\" in navigator) {\n  window.addEventListener(\"load\", () => {\n    navigator.serviceWorker.register(\"/service-worker.js\").then(registration => {\n      console.log(\"SW registered: \", registration);\n    }).catch(registrationError => {\n      console.log(\"SW registration failed: \", registrationError);\n    });\n  });\n}","map":{"version":3,"names":["sumFun","countFun","add","console","log","module","hot","accept","document","getElementById","onclick","then","mul","del","promise","Promise","resolve","navigator","window","addEventListener","serviceWorker","register","registration","catch","registrationError"],"sources":["C:/Users/WLS/Desktop/自己练习/前端/练习/webpack5/01_基础配置/src/main.js"],"sourcesContent":["import sumFun from './js/sum'\r\nimport countFun from './js/count'\r\nimport { add } from './js/math'\r\nimport './css/index.css'\r\nimport './less/index.less'\r\nimport \"./sass/index.sass\";\r\nimport \"./sass/index.scss\";\r\nimport \"./styl/index.styl\";\r\nimport './css/iconfont.css';\r\n\r\nconsole.log(sumFun(1, 2, 3, 4, 5));\r\ncountFun(55);\r\nconsole.log(add(1, 1));\r\n\r\n// 判断是否支持HMR功能\r\n// 各个文件模块的监听的回调不会相互影响；哪一个模块发生变化，就执行哪一个回调；\r\nif (module.hot) {\r\n  // 回调函数可以不写，也会只更新这个count.js文件模块\r\n  module.hot.accept(\"./js/count.js\", function () {\r\n    // count.js 文件修改后，要执行的回调函数\r\n    console.log('count.js文件热替换');\r\n  });\r\n  // 回调函数可以不写，也会只更新这个sum.js文件模块\r\n  module.hot.accept(\"./js/sum.js\", function () {\r\n    console.log('sum.js文件热替换');\r\n  });\r\n}\r\n\r\n// import函数 按需加载\r\ndocument.getElementById('after_load').onclick = function () {\r\n  // eslint不能识别 import 函数的动态导入语法，需要在 .eslintrc.js 中做额外配置\r\n  // 给按需加载的after_load.js文件命名为after_load\r\n  // webpackChunkName: \"after_load\"：这是webpack动态导入模块命名的方式\r\n  // \"after_load\"将来就会作为下面chunkFilename的属性值[name]的值显示。\r\n  import(/* webpackChunkName: \"after_load\" */ './js/after_load').then(({ mul, del }) => {\r\n    console.log(mul(3, 5));\r\n    console.log(del(5, 3));\r\n  })\r\n}\r\n\r\n\r\n// 添加promise代码，测试 Core-js 彻底解决 js 兼容性问题\r\nconst promise = Promise.resolve();\r\npromise.then(() => {\r\n  console.log(\"hello promise\");\r\n});\r\n\r\n// PWA（渐进式网络应用程序），实现离线(offline) 时应用程序能够继续运行功能\r\nif (\"serviceWorker\" in navigator) {\r\n  window.addEventListener(\"load\", () => {\r\n    navigator.serviceWorker\r\n      .register(\"/service-worker.js\")\r\n      .then((registration) => {\r\n        console.log(\"SW registered: \", registration);\r\n      })\r\n      .catch((registrationError) => {\r\n        console.log(\"SW registration failed: \", registrationError);\r\n      });\r\n  });\r\n}"],"mappings":"AAAA,OAAOA,MAAM,MAAM,UAAU;AAC7B,OAAOC,QAAQ,MAAM,YAAY;AACjC,SAASC,GAAG,QAAQ,WAAW;AAC/B,OAAO,iBAAiB;AACxB,OAAO,mBAAmB;AAC1B,OAAO,mBAAmB;AAC1B,OAAO,mBAAmB;AAC1B,OAAO,mBAAmB;AAC1B,OAAO,oBAAoB;AAE3BC,OAAO,CAACC,GAAG,CAACJ,MAAM,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;AAClCC,QAAQ,CAAC,EAAE,CAAC;AACZE,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;;AAEtB;AACA;AACA,IAAIG,MAAM,CAACC,GAAG,EAAE;EACd;EACAD,MAAM,CAACC,GAAG,CAACC,MAAM,CAAC,eAAe,EAAE,YAAY;IAC7C;IACAJ,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;EAC9B,CAAC,CAAC;EACF;EACAC,MAAM,CAACC,GAAG,CAACC,MAAM,CAAC,aAAa,EAAE,YAAY;IAC3CJ,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;EAC5B,CAAC,CAAC;AACJ;;AAEA;AACAI,QAAQ,CAACC,cAAc,CAAC,YAAY,CAAC,CAACC,OAAO,GAAG,YAAY;EAC1D;EACA;EACA;EACA;EACA,MAAM,EAAC,oCAAqC,iBAAiB,CAAC,CAACC,IAAI,CAAC,QAAkB;IAAA,IAAjB;MAAEC,GAAG;MAAEC;IAAI,CAAC;IAC/EV,OAAO,CAACC,GAAG,CAACQ,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IACtBT,OAAO,CAACC,GAAG,CAACS,GAAG,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACxB,CAAC,CAAC;AACJ,CAAC;;AAGD;AACA,MAAMC,OAAO,GAAGC,OAAO,CAACC,OAAO,EAAE;AACjCF,OAAO,CAACH,IAAI,CAAC,MAAM;EACjBR,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;AAC9B,CAAC,CAAC;;AAEF;AACA,IAAI,eAAe,IAAIa,SAAS,EAAE;EAChCC,MAAM,CAACC,gBAAgB,CAAC,MAAM,EAAE,MAAM;IACpCF,SAAS,CAACG,aAAa,CACpBC,QAAQ,CAAC,oBAAoB,CAAC,CAC9BV,IAAI,CAAEW,YAAY,IAAK;MACtBnB,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEkB,YAAY,CAAC;IAC9C,CAAC,CAAC,CACDC,KAAK,CAAEC,iBAAiB,IAAK;MAC5BrB,OAAO,CAACC,GAAG,CAAC,0BAA0B,EAAEoB,iBAAiB,CAAC;IAC5D,CAAC,CAAC;EACN,CAAC,CAAC;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}