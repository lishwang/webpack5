{"version":3,"file":"static/js/main.f537575c.js","mappings":"wGAAe,IAAmBA,ECUlCC,QAAQC,ICVO,WAA0B,2BAANC,EAAI,yBAAJA,EAAI,gBACrC,OAAOA,EAAKC,QAAO,CAACC,EAAKC,IAAYD,EAAMC,GAAS,IACtD,CDQYC,CAAO,EAAG,EAAG,EAAG,EAAG,IDVGP,ECWzB,GDVPC,QAAQC,IAAIF,EAAQ,GCWtBC,QAAQC,IAAQ,EAAG,GAiBnBM,SAASC,eAAe,cAAcC,QAAU,WAK9C,6BAA+DC,MAAK,IAAkB,IAAjB,IAAEC,EAAG,IAAEC,GAAK,EAC/EZ,QAAQC,IAAIU,EAAI,EAAG,IACnBX,QAAQC,IAAIW,EAAI,EAAG,GAAG,GAE1B,EAIgBC,QAAQC,UAChBJ,MAAK,KACXV,QAAQC,IAAI,gBAAgB,IAI1B,kBAAmBc,WACrBC,OAAOC,iBAAiB,QAAQ,KAC9BF,UAAUG,cACPC,SAAS,sBACTT,MAAMU,IACLpB,QAAQC,IAAI,kBAAmBmB,EAAa,IAE7CC,OAAOC,IACNtB,QAAQC,IAAI,2BAA4BqB,EAAkB,GAC1D,G","sources":["webpack://webpack5/./src/js/count.js","webpack://webpack5/./src/main.js","webpack://webpack5/./src/js/sum.js"],"sourcesContent":["export default function alertFun (count) {\r\n  console.log(count + 0);\r\n}","import sumFun from './js/sum'\r\nimport countFun from './js/count'\r\nimport { add } from './js/math'\r\nimport './css/index.css'\r\nimport './less/index.less'\r\nimport \"./sass/index.sass\";\r\nimport \"./sass/index.scss\";\r\nimport \"./styl/index.styl\";\r\nimport './css/iconfont.css';\r\n\r\nconsole.log(sumFun(1, 2, 3, 4, 5));\r\ncountFun(55);\r\nconsole.log(add(1, 1));\r\n\r\n// 判断是否支持HMR功能\r\n// 各个文件模块的监听的回调不会相互影响；哪一个模块发生变化，就执行哪一个回调；\r\nif (module.hot) {\r\n  // 回调函数可以不写，也会只更新这个count.js文件模块\r\n  module.hot.accept(\"./js/count.js\", function () {\r\n    // count.js 文件修改后，要执行的回调函数\r\n    console.log('count.js文件热替换');\r\n  });\r\n  // 回调函数可以不写，也会只更新这个sum.js文件模块\r\n  module.hot.accept(\"./js/sum.js\", function () {\r\n    console.log('sum.js文件热替换');\r\n  });\r\n}\r\n\r\n// import函数 按需加载\r\ndocument.getElementById('after_load').onclick = function () {\r\n  // eslint不能识别 import 函数的动态导入语法，需要在 .eslintrc.js 中做额外配置\r\n  // 给按需加载的after_load.js文件命名为after_load\r\n  // webpackChunkName: \"after_load\"：这是webpack动态导入模块命名的方式\r\n  // \"after_load\"将来就会作为下面chunkFilename的属性值[name]的值显示。\r\n  import(/* webpackChunkName: \"after_load\" */ './js/after_load').then(({ mul, del }) => {\r\n    console.log(mul(3, 5));\r\n    console.log(del(5, 3));\r\n  })\r\n}\r\n\r\n\r\n// 添加promise代码，测试 Core-js 彻底解决 js 兼容性问题\r\nconst promise = Promise.resolve();\r\npromise.then(() => {\r\n  console.log(\"hello promise\");\r\n});\r\n\r\n// PWA（渐进式网络应用程序），实现离线(offline) 时应用程序能够继续运行功能\r\nif (\"serviceWorker\" in navigator) {\r\n  window.addEventListener(\"load\", () => {\r\n    navigator.serviceWorker\r\n      .register(\"/service-worker.js\")\r\n      .then((registration) => {\r\n        console.log(\"SW registered: \", registration);\r\n      })\r\n      .catch((registrationError) => {\r\n        console.log(\"SW registration failed: \", registrationError);\r\n      });\r\n  });\r\n}","export default function addFun (...args) {\r\n  return args.reduce((sum, current) => sum + current, 110);\r\n}"],"names":["count","console","log","args","reduce","sum","current","sumFun","document","getElementById","onclick","then","mul","del","Promise","resolve","navigator","window","addEventListener","serviceWorker","register","registration","catch","registrationError"],"sourceRoot":""}